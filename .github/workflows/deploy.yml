name: CI/CD Pipeline

on:
  push:
    branches: [ production ]
  pull_request:
    branches: [ production ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create backend env file
      run: |
        {
          echo "NODE_ENV=production"
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}"
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
          echo "CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}"
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}"
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}"
        } > apps/backend/.env.production
    
    - name: Create frontend env file
      run: |
        {
          echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}"
          echo "VITE_API_URL=https://ohsync.me/api"
        } > apps/frontend/.env.production
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/ohsync/main-service:latest

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/production'
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      run: |
        ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p ~/app/apps/backend ~/app/apps/frontend"
        scp -r docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:~/app/docker-compose.yml
        scp -r apps/backend/.env.production $DEPLOY_USER@$DEPLOY_HOST:~/app/apps/backend/.env.production
        scp -r apps/frontend/.env.production $DEPLOY_USER@$DEPLOY_HOST:~/app/apps/frontend/.env.production
        ssh $DEPLOY_USER@$DEPLOY_HOST "
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ${{ secrets.DEPLOY_USER }}
            newgrp docker
          fi

          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          cd app && docker system prune -a --volumes && docker compose pull && docker compose up -d
        "